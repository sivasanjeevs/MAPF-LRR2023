openapi: 3.0.0
info:
  title: "Multi-Agent Path Finding (MAPF) Server API"
  description: |
    API for managing a real-time, grid-based multi-agent pathfinding simulation.
    It allows for initializing a simulation, planning agent movements step-by-step,
    and dynamically adding pickup-and-delivery tasks.
  version: "1.0.0"

servers:
  - url: "http://localhost:8080"
    description: "Local development server"

paths:
  /health:
    get:
      summary: "Health Check"
      description: "Checks if the MAPF server is running and responsive."
      responses:
        '200':
          description: "Server is healthy and running."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  /reset:
    post:
      summary: "Reset Simulation"
      description: "Resets the server to its initial state, clearing any active session, agent positions, and task queues. This should be called before starting a new simulation."
      responses:
        '200':
          description: "Simulation was successfully reset."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"

  /plan:
    post:
      summary: "Plan Next Actions"
      description: |
        The core "heartbeat" endpoint of the simulation.
        1.  **On first call (with `agents: []`)**: Initializes the session using the server's pre-loaded agent configuration and returns the starting state of all agents.
        2.  **On subsequent calls**: Takes the current state of all agents and returns the calculated next action for each one for the next timestep.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agents:
                  type: array
                  description: "A list of the current states of all agents in the simulation."
                  items:
                    type: object
                    properties:
                      location:
                        type: integer
                        description: "The agent's current grid cell location (linearized)."
                      orientation:
                        type: integer
                        description: "The agent's current orientation (e.g., 0: North, 1: East)."
                      timestep:
                        type: integer
                        description: "The current simulation timestep."
            example:
              agents:
                - location: 12
                  orientation: 0
                  timestep: 5
                - location: 23
                  orientation: 1
                  timestep: 5
      responses:
        '200':
          description: "Planning was successful. The response contains the next action for each agent."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  timestep:
                    type: integer
                    example: 6
                  actions:
                    type: array
                    items:
                      type: object
                      properties:
                        agent_id:
                          type: integer
                        action:
                          type: string
                          example: "MOVE_FORWARD"
                        location:
                          type: integer
                          example: 13
                        orientation:
                          type: integer
                          example: 0
                  total_tasks_completed:
                    type: integer
                    example: 2
                  tasks_remaining:
                    type: integer
                    example: 3
        '400':
          description: "Invalid request format."
        '500':
          description: "A critical error occurred during planning."

  /add_task:
    post:
      summary: "Add a New Task"
      description: "Dynamically adds a new pickup-and-delivery task to the server's master task queue. The server will automatically assign it to a free agent."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - start_location
                - goal_location
              properties:
                start_location:
                  type: integer
                  description: "The grid location for task pickup."
                  example: 50
                goal_location:
                  type: integer
                  description: "The grid location for task delivery."
                  example: 100
      responses:
        '200':
          description: "Task was successfully added."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  task_id:
                    type: integer
                    example: 123
        '400':
          description: "Invalid location provided (e.g., out of bounds or on an obstacle)."

  /task_status:
    get:
      summary: "Get Task Status of All Agents"
      description: "Retrieves the current status of every agent in the simulation, including whether they are idle, picking up a task, or delivering a task."
      responses:
        '200':
          description: "A list of statuses for all agents."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    agent_id:
                      type: integer
                    has_task:
                      type: boolean
                    is_carrying_task:
                      type: boolean
                    tasks_completed:
                      type: integer
                    current_task:
                      type: object
                      properties:
                        task_id:
                          type: string
                        start_location:
                          type: integer
                        goal_location:
                          type: integer
              example:
                - agent_id: 0
                  has_task: true
                  is_carrying_task: false
                  tasks_completed: 1
                  current_task:
                    task_id: "124"
                    start_location: 50
                    goal_location: 100
                - agent_id: 1
                  has_task: false
                  is_carrying_task: false
                  tasks_completed: 2
                  current_task: null

  /report:
    get:
      summary: "Generate Simulation Report"
      description: "Generates a complete summary report of the simulation from the start time until the current timestep. Includes performance metrics like makespan and sum of costs."
      responses:
        '200':
          description: "A detailed JSON report of the simulation."
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamSize:
                    type: integer
                  numTaskFinished:
                    type: integer
                  sumOfCost:
                    type: integer
                  makespan:
                    type: integer
                  actualPaths:
                    type: array
                    items:
                      type: string
                  events:
                    type: array
                    items:
                      type: array
                      items:
                        type: array
